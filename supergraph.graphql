
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
  @link(url: "https://specs.apollo.dev/inaccessible/v0.2", for: SECURITY)
{
  query: Query
  subscription: Subscription
}

directive @inaccessible on FIELD_DEFINITION | OBJECT | INTERFACE | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Author
  @join__type(graph: TWO)
{
  name: String!
}

type Book implements Media
  @join__implements(graph: ONE, interface: "Media")
  @join__type(graph: ONE, key: "id")
  @join__type(graph: ONE, key: "title")
{
  id: ID!
  title: String!
  teste: String
  author: Author! @join__field
}

scalar join__FieldSet

enum join__Graph {
  ONE @join__graph(name: "one", url: "http://localhost:4001/graphql")
  TWO @join__graph(name: "two", url: "http://localhost:4002/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

interface Media
  @join__type(graph: ONE, key: "id")
  @join__type(graph: TWO, key: "id", isInterfaceObject: true)
{
  id: ID!
  title: String! @join__field(graph: ONE)
  teste: String @inaccessible @join__field(graph: ONE) @join__field(graph: TWO, external: true)
  author: Author! @join__field(graph: TWO, requires: "teste")
}

type Query
  @join__type(graph: ONE)
  @join__type(graph: TWO)
{
  books: [Media!] @join__field(graph: ONE)
}

type Subscription
  @join__type(graph: ONE)
{
  count: Int!
}